<?xml version="1.0" encoding="UTF-8"?>
<project name="xFaceLib" default="help">

    <property file="local.properties" />
    <!--
         The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->
    <property file="ant.properties" />

    <!--
         The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->

    <loadproperties srcFile="project.properties" />

    <!--
         if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
    -->

    <property environment="env" />

    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- quick check on sdk.dir -->
    <fail message="sdk.dir is missing. Make sure to modify ../setting.properties and set the ANDROID_SDK_ROOT environment variable." unless="sdk.dir" />

    <!-- init dir structure -->
  <target name="init">
        <mkdir dir="${basedir}/bin/xFaceLib"/>
        <mkdir dir="${basedir}/bin/xFaceLib/libs"/>
        <mkdir dir="${basedir}/bin/xFaceLib/res"/>
        <mkdir dir="${basedir}/bin/xFaceLib/assets"/>
    </target>

    <!-- compile jar -->
    <target name="jar" depends="-set-release-mode, -compile">
        <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />
        <property name="jar.out.path" value="${basedir}/bin" />
        <jar destfile="${jar.out.path}/xFaceLib/libs/xface.jar">
            <fileset dir="${out.classes.absolute.dir}" excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/BuildConfig.class" includes="**/*.class" />
            <zipfileset includes="**/*.class" src="${lib.framework}/bin/classes.jar"/>
        </jar>
    </target>

    <!-- package libs -->
    <target name="package">
        <!-- copy libproject lib -->
        <copy todir="${basedir}/bin/xFaceLib/libs/">
          <fileset dir="${lib.framework}/libs">
            <include name="*.jar" />
            <include name="armeabi/*.so" />
          </fileset>
        </copy>

        <copy todir="${basedir}/bin/xFaceLib/libs/">
           <fileset dir="${basedir}/libs">
            <include name="*.jar" />
                <include name="armeabi/*.so" />
          </fileset>
        </copy>

       <!-- using this to tell user the permission -->
       <copy todir="${basedir}/bin/xFaceLib"  file="${basedir}/AndroidManifest.xml"/>

       <copy todir="${basedir}/bin/xFaceLib/res">
            <fileset dir="${basedir}/res">
                    <exclude name="drawable*/icon.png"/>
            </fileset>
       </copy>
       <!-- copy assets -->
       <copy todir="${basedir}/bin/xFaceLib/assets">
            <fileset dir="${basedir}/assets"/>
       </copy>
       <zip destfile="${basedir}/bin/xFaceLib.zip" basedir="${basedir}/bin/xFaceLib"/>
  </target>

    <property name="lib.out.path" value="${basedir}/bin" />
    <condition property="lib.out.exists">
        <available file="${lib.out.path}">
        </available>
    </condition>

  <target name="clean" if="${lib.out.exists}">
     <delete includeEmptyDirs="true" dir="${basedir}/bin"/>
     <delete includeEmptyDirs="true" dir="${lib.framework}/bin"/>
  </target>

  <target name="lib" depends="clean,init,jar,package">
  </target>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>